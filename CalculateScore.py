import jieba
import re
import os
import numpy as np
from collections import Counter


# 外部文件停用词表（使用优化后的哈工大停用词表）
def load_stopwords(file_path="stopwords.txt"):
    """
    从文本文件加载停用词表
    :param file_path: 停用词表文件路径
    :return: 停用词集合
    """
    # 如果文件不存在，使用基础停用词表
    if not os.path.exists(file_path):
        print(f"警告: 停用词文件 {file_path} 不存在，使用基础停用词表")
        return base_stopwords_set()

    stopwords_set = set()
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                word = line.strip()
                if word and not word.startswith('#'):  # 跳过空行和注释行
                    stopwords_set.add(word)
        print(f"成功加载停用词表，包含 {len(stopwords_set)} 个字词")
        return stopwords_set
    except Exception as e:
        print(f"加载停用词表时出错: {e}")
        print("使用基础停用词表")
        return base_stopwords_set()


# 基础停用词表
def base_stopwords_set():
    """提供基础停用词集合"""
    base_words = [
    "的", "了", "和", "是", "就", "都", "而", "及", "与", "在",
    "这", "有", "或", "更", "一个", "我们", "你们", "他们",
    "项目", "进行", "要求", "提供", "包括", "相关",
    "根据", "按照", "应当", "需要", "可以", "必须", "确保",
    "达到", "满足", "关于", "由于", "因为", "所以", "例如",
    "首先", "其次", "最后", "此外", "同时", "其中", "另外",
    "投标", "招标", "文件", "响应", "条件", "内容",
    "方式", "方法", "措施", "目标", "任务",
    "义务", "甲方", "乙方", "双方", "规定",
    "时间", "周期", "期间", "开始", "结束", "持续", "完成",
    "每个", "所有", "若干", "某些", "多次", "一次", "二次",
    "非常", "十分", "极其", "较为", "相对", "比较", "尤其",
    "本人", "本公司", "贵方", "我们公司", "我方",
    "并且", "或者", "但是", "然而", "如果", "除非",
    "详见", "参照", "遵守", "执行", "实施", "符合", "遵守",
    "参见", "附件", "条款", "部分", "章节", "条数", "页数",
    "招标", "投标", "开标", "评标", "中标", "标书", "投标人", "招标人",
    "投标文件", "招标文件", "投标方", "招标方", "投标单位", "招标单位",
    "投标函", "投标保证金", "评标委员会", "评标办法", "评标标准", "询标",
    "废标", "流标", "资格审查", "资格预审", "根据", "按照", "应当", "必须",
    "须", "不得", "严禁", "禁止", "须知", "遵守", "遵循", "执行", "实施",
    "规定", "法规", "规章", "制度", "政策", "法律", "条例", "规程", "规范",
    "标准", "项目名称", "项目编号", "项目内容", "项目实施", "项目概况", "项目地点",
    "项目工期", "项目预算", "项目计划", "项目负责人", "项目目标", "项目要求", "项目范围",
    "项目建设", "项目投资", "第一章", "第一节", "第一条", "一", "二", "三", "四",
    "五", "六", "七", "八", "九", "十", "1", "2", "3", "4", "5", "6", "7", "8",
    "9", "10", "标题", "目录", "页眉", "页脚", "页码", "附表", "附件", "附录", "表格",
    "图片", "图示", "图例", "是", "如下", "包括", "包含", "有关", "具有", "详见", "见",
    "即", "例如", "如", "等", "以及", "包括但不限于", "元", "万元", "人民币", "美元",
    "欧元", "公斤", "吨", "米", "平方米", "立方米", "小时", "天", "月", "年", "其", "该",
    "各", "本", "我", "我公司", "我方", "贵方", "贵公司", "业主", "发包方", "承包方"
    ]
    return set(base_words)


# 自动加载停用词表
def load_stopwords_auto():
    """尝试从多个可能位置加载停用词表"""
    possible_paths = [
        "stopwords.txt",  # 当前目录
        "data/stopwords.txt",  # data子目录
        "resources/stopwords.txt",  # resources目录
        "/etc/stopwords/chinese.txt",  # Linux系统位置
        "C:\\Stopwords\\chinese.txt",  # Windows系统位置
    ]

    # 查找存在的文件路径
    for path in possible_paths:
        if os.path.exists(path):
            return load_stopwords(path)

    # 没有找到文件，使用基础停用词表
    print("警告: 未找到停用词表文件，使用基础停用词表")
    return base_stopwords_set()

stopwords = load_stopwords_auto()

# 关键词表
DIMENSION_KEYWORDS = {
    'price_reasonableness': [  # 报价合理性
        ("报价", 0.4), ("价格", 0.4), ("成本", 0.4), ("费用", 0.4), ("预算", 0.4),
        ("报价单", 0.4), ("价格明细", 0.35), ("费用构成", 0.3), ("成本分析", 0.3),
        ("预算说明", 0.3), ("价格方案", 0.3), ("报价依据", 0.25), ("费用说明", 0.25),
        ("价格策略", 0.25), ("报价合理性", 0.25), ("成本控制", 0.2), ("计价标准", 0.3),
        ("让利方案", 0.25), ("优惠幅度", 0.2), ("总价构成", 0.2), ("单价分析", 0.2),
        ("让利幅度", 0.18), ("价格优势", 0.2), ("报价结构", 0.18), ("预算管理", 0.2),
        ("资源优化", 0.15), ("报价策略", 0.22), ("风险费用", 0.18), ("资金流分析", 0.15),
        ("付款周期", 0.18), ("浮动机制", 0.15), ("价格比较", 0.2), ("成本效益", 0.22),
        ("报价审核", 0.18), ("价格弹性", 0.15), ("议价空间", 0.18), ("成本压缩", 0.2),
        ("边际成本", 0.15), ("固定成本", 0.18), ("变动成本", 0.18), ("投资回报", 0.22),
        ("资金占用", 0.15), ("付款条件", 0.2), ("分期付款", 0.18), ("价格谈判", 0.2),
        ("成本节约", 0.22), ("预算偏差", 0.15), ("报价基准", 0.2), ("成本预测", 0.2),
        ("价格调整", 0.18), ("成本结构", 0.2), ("报价优势", 0.22), ("成本优化", 0.2),
        ("价格体系", 0.18), ("成本管理", 0.22), ("报价模型", 0.2), ("成本控制点", 0.18),
        ("价格竞争力", 0.25), ("成本透明", 0.2)
    ],

    'implementation_approach': [  # 项目总体思路
        ("方案", 0.4), ("计划", 0.4), ("实施", 0.4), ("设计", 0.4), ("流程", 0.4),
        ("项目方案", 0.35), ("实施流程", 0.32), ("进度计划", 0.3), ("创新设计", 0.28),
        ("技术路线", 0.28), ("解决方案", 0.3), ("执行标准", 0.25), ("质量目标", 0.28),
        ("操作规范", 0.25), ("风险预案", 0.25), ("系统设计", 0.26), ("技术措施", 0.26),
        ("项目规划", 0.28), ("实施步骤", 0.26), ("技术保障", 0.25), ("设计理念", 0.24),
        ("执行路径", 0.24), ("技术规范", 0.26), ("实施框架", 0.25), ("技术标准", 0.26),
        ("项目设计", 0.28), ("技术参数", 0.22), ("实施策略", 0.26), ("项目文档", 0.22),
        ("技术验证", 0.22), ("方案论证", 0.22), ("实施计划", 0.28), ("技术优化", 0.24),
        ("技术应用", 0.25), ("可行性分析", 0.25), ("技术适应性", 0.22), ("标准化流程", 0.22),
        ("成熟度评估", 0.24), ("可扩展性", 0.22), ("兼容性设计", 0.22), ("时间表", 0.25),
        ("关键节点", 0.24), ("资源配置", 0.26), ("质量控制", 0.26), ("风险管理", 0.26),
        ("沟通机制", 0.22), ("变更管理", 0.22), ("文档体系", 0.2), ("验收标准", 0.25),
        ("效果评估", 0.24), ("持续改进", 0.22), ("技术培训", 0.24), ("后期支持", 0.24),
        ("优化建议", 0.22), ("创新点", 0.24), ("项目目标", 0.28), ("实施范围", 0.25),
        ("工作分解", 0.22)
    ],

    'management_plan': [  # 管理方案制定
        ("管理", 0.4), ("质量", 0.4), ("进度", 0.4), ("安全", 0.4), ("控制", 0.4),
        ("管理体系", 0.35), ("进度控制", 0.32), ("安全措施", 0.3), ("资源分配", 0.28),
        ("风险管理", 0.28), ("沟通机制", 0.26), ("应急预案", 0.26), ("过程监控", 0.26),
        ("验收标准", 0.25), ("文档管理", 0.24), ("团队协作", 0.24), ("成本控制", 0.26),
        ("考核制度", 0.24), ("协调机制", 0.24), ("物资管理", 0.24), ("信息管理", 0.22),
        ("变更控制", 0.24), ("项目组织", 0.26), ("质量保证", 0.28), ("安全保障", 0.26),
        ("时间管理", 0.28), ("资源优化", 0.24), ("责任分工", 0.26), ("管理流程", 0.26),
        ("管理标准", 0.24), ("管理工具", 0.24), ("管理策略", 0.26), ("管理框架", 0.24),
        ("管理目标", 0.26), ("绩效评估", 0.24), ("监督机制", 0.24), ("管理评审", 0.24),
        ("改进方案", 0.22), ("信息化管理", 0.22), ("标准化管理", 0.22), ("规范管理", 0.22),
        ("精细管理", 0.24), ("管理创新", 0.22), ("协同管理", 0.22), ("管理效率", 0.24),
        ("管理效果", 0.22), ("管理责任", 0.24), ("管理权限", 0.22), ("流程优化", 0.24),
        ("风险控制", 0.26), ("问题解决", 0.24), ("决策机制", 0.24), ("沟通渠道", 0.22),
        ("培训体系", 0.22), ("绩效管理", 0.24), ("经验总结", 0.22), ("最佳实践", 0.22),
        ("体系建设", 0.26), ("方案论证", 0.24), ("实施保障", 0.24), ("质量监控", 0.26)
    ],

    'personnel_qualification': [  # 人员资质
        ("人员", 0.4), ("团队", 0.4), ("资质", 0.4), ("经验", 0.4), ("培训", 0.4),
        ("高级", 0.6), ("中级", 0.3), ("初级", 0.2),
        ("项目团队", 0.35), ("专业资质", 0.32), ("技术能力", 0.3), ("从业经验", 0.28),
        ("培训认证", 0.28), ("岗位配置", 0.26), ("业绩证明", 0.26), ("技能证书", 0.26),
        ("教育背景", 0.24), ("专业分工", 0.24), ("团队结构", 0.24), ("核心成员", 0.26),
        ("技术骨干", 0.26), ("职业资格", 0.24), ("能力评估", 0.24), ("专业培训", 0.26),
        ("技能水平", 0.26), ("专业背景", 0.26), ("工作经验", 0.28), ("管理能力", 0.26),
        ("沟通能力", 0.24), ("团队协作", 0.26), ("责任意识", 0.24), ("专业素养", 0.26),
        ("创新思维", 0.22), ("问题解决", 0.26), ("学习能力", 0.22), ("适应能力", 0.22),
        ("技术专家", 0.24), ("专业顾问", 0.22), ("项目负责人", 0.26), ("人员配备", 0.28),
        ("资质证明", 0.28), ("专业人员", 0.28), ("技术人才", 0.26), ("管理人才", 0.24),
        ("核心团队", 0.26), ("团队建设", 0.24), ("团队管理", 0.24), ("协作能力", 0.26),
        ("技能评估", 0.24), ("培训计划", 0.26), ("绩效考核", 0.24), ("激励机制", 0.22),
        ("人员稳定", 0.22), ("发展计划", 0.22), ("专业成长", 0.22), ("知识结构", 0.22),
        ("能力矩阵", 0.24), ("配置合理", 0.26), ("资质认证", 0.26), ("经验积累", 0.24),
        ("专业深度", 0.24)
    ],

    'service_commitment': [  # 服务承诺
        ("服务", 0.4), ("承诺", 0.4), ("响应", 0.4), ("支持", 0.4), ("维护", 0.4),
        ("业主", 0.4), ("协商", 0.4), ("沟通", 0.4),
        ("服务保障", 0.35), ("响应时效", 0.32), ("售后服务", 0.32), ("技术支持", 0.3),
        ("服务标准", 0.3), ("客户培训", 0.28), ("问题解决", 0.28), ("备件供应", 0.26),
        ("维护计划", 0.26), ("满意保障", 0.26), ("升级服务", 0.24), ("远程支持", 0.24),
        ("服务协议", 0.26), ("保修条款", 0.26), ("服务网络", 0.24), ("应急响应", 0.26),
        ("客户支持", 0.26), ("服务品质", 0.28), ("服务态度", 0.24), ("服务效率", 0.26),
        ("服务创新", 0.22), ("定制服务", 0.24), ("延伸服务", 0.22), ("增值服务", 0.22),
        ("服务跟踪", 0.24), ("服务反馈", 0.24), ("服务改进", 0.24), ("服务承诺", 0.3),
        ("响应机制", 0.28), ("服务覆盖", 0.24), ("服务深度", 0.24), ("服务广度", 0.22),
        ("持续服务", 0.24), ("服务可靠", 0.26), ("服务专业", 0.28), ("及时服务", 0.28),
        ("全面服务", 0.24), ("服务便捷", 0.22), ("服务规范", 0.26), ("差异化服务", 0.22),
        ("客户满意", 0.3), ("服务评价", 0.26), ("服务优化", 0.24), ("服务创新", 0.22),
        ("服务体验", 0.26), ("服务价值", 0.24), ("服务成本", 0.22), ("服务效益", 0.22),
        ("管理体系", 0.26), ("流程优化", 0.26), ("质量监控", 0.26), ("问题预防", 0.24),
        ("持续改进", 0.24), ("客户关系", 0.24), ("品牌服务", 0.22)
    ],

    'corporate_qualification': [  # 企业资质
        ("企业", 0.4), ("资质", 0.4), ("证书", 0.4), ("业绩", 0.4), ("经验", 0.4),
        ("企业资质", 0.35), ("项目案例", 0.35), ("认证证书", 0.32), ("财务状况", 0.3),
        ("信用等级", 0.3), ("设备资源", 0.28), ("专利技术", 0.26), ("获奖荣誉", 0.26),
        ("行业许可", 0.26), ("合作伙伴", 0.24), ("研发能力", 0.26), ("生产能力", 0.26),
        ("质量认证", 0.28), ("经营许可", 0.26), ("行业资质", 0.28), ("企业规模", 0.26),
        ("客户评价", 0.26), ("市场份额", 0.24), ("品牌影响", 0.26), ("行业地位", 0.26),
        ("技术实力", 0.3), ("管理能力", 0.26), ("创新能力", 0.26), ("履约能力", 0.28),
        ("风险控制", 0.24), ("企业信誉", 0.3), ("企业文化", 0.22), ("社会责任", 0.24),
        ("持续发展", 0.22), ("企业荣誉", 0.26), ("行业认证", 0.28), ("资质等级", 0.28),
        ("资质范围", 0.26), ("资质时效", 0.24), ("资质维护", 0.22), ("资质升级", 0.22),
        ("资质体系", 0.24), ("资质完整", 0.24), ("资质合规", 0.26), ("资质管理", 0.24),
        ("企业历史", 0.22), ("业绩记录", 0.3), ("项目经验", 0.32), ("技术储备", 0.24),
        ("研发投入", 0.22), ("创新成果", 0.24), ("质量管理", 0.28), ("环境管理", 0.24),
        ("健康安全", 0.24), ("信息安全", 0.22), ("治理结构", 0.22), ("战略规划", 0.22),
        ("核心能力", 0.26), ("资源整合", 0.24), ("抗风险力", 0.24), ("发展潜力", 0.22),
        ("社会责任", 0.24), ("企业形象", 0.22)
    ]
}

# 权重分配
DEFAULT_WEIGHTS = {
    'price_reasonableness': 0.15,
    'implementation_approach': 0.15,
    'management_plan': 0.30,
    'personnel_qualification': 0.20,
    'service_commitment': 0.10,
    'corporate_qualification': 0.10
}

# 维度名称映射
DIMENSION_NAMES = {
    'price_reasonableness': '报价合理性',
    'implementation_approach': '项目总体思路',
    'management_plan': '管理方案制定',
    'personnel_qualification': '人员资质',
    'service_commitment': '服务承诺',
    'corporate_qualification': '企业资质'
}


class TextScorer:
    def __init__(self, text):
        self.text = text
        self.tokenized = self.preprocess_text(text)
        self.word_freq = Counter(self.tokenized)

    def preprocess_text(self, text):
        """文本预处理：清洗、分词、去停用词"""
        # 清洗文本
        cleaned = re.sub(r'\s+|[^\w\s]', '', text)
        # 分词
        words = jieba.cut(cleaned)
        # 去停用词和单字
        filtered = [
            word for word in words
            if word not in stopwords
               and len(word) > 1
               and word.strip()
        ]
        return filtered

    def calculate_dimension_score(self, dimension):
        """计算单个维度得分 - 基于关键词加权计数"""
        keyword_list = DIMENSION_KEYWORDS[dimension]
        dimension_score = 0

        # 计算最大可能得分（如果所有关键词都出现）
        max_score = sum(weight for _, weight in keyword_list)

        # 计算实际得分
        for keyword, weight in keyword_list:
            if keyword in self.word_freq:
                # 考虑词频但不重复计分
                dimension_score +=  self.word_freq[keyword]  * weight

        # 转换为百分制
        if max_score > 0:
            percent_score = (dimension_score / max_score) * 100
            return min(100, max(0, round(percent_score, 2)))
        return 0


class BidScorer:
    def __init__(self, weights=None):
        """
        初始化评分系统
        :param weights: 字典类型，各维度权重分配(默认值）
        """
        self.weights = weights or {
            'price_reasonableness': 0.15,
            'implementation_approach': 0.15,
            'management_plan': 0.30,
            'personnel_qualification': 0.20,
            'service_commitment': 0.10,
            'corporate_qualification': 0.10
        }
        # 验证权重总和为1
        assert abs(sum(self.weights.values()) - 1.0) < 0.001, "权重总和必须等于1"

    def score_bid(self, text , company_name = ""):
        """
        计算投标总分（加权平均）
        :param text: 投标文件文本
               company_name: 公司名称
        :return: 加权总分和详细得分
        """
        self.text = text
        self.company_name = company_name

        scorer = TextScorer(text)

        # 计算各维度得分
        dimension_scores = {}
        for dimension in self.weights.keys():
            score = scorer.calculate_dimension_score(dimension)
            dimension_scores[dimension] = score

        # 计算加权总分
        total_score = sum(
            dimension_scores[dimension] * self.weights[dimension]
            for dimension in self.weights
        )

        # 确保总分在0-100 范围内
        final_score = max(0, min(100, round(total_score, 2)))

        return final_score, dimension_scores
